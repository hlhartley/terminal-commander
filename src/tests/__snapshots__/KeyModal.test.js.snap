// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KeyModal should match the snapshot with all data passed in correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <KeyModal
    toggleModal={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="button-container"
        >
          <button
            onClick={[Function]}
          >
            x
          </button>
        </div>,
        <h2
          className="modal-title"
        >
          Key:
        </h2>,
        <ul
          className="modal-list"
        >
          <li>
            <span
              className="skyblue"
            >
              [file]
            </span>
             = file name
          </li>
          <li>
            <span
              className="skyblue"
            >
              [directory]
            </span>
             = directory name
          </li>
          <li>
            <span
              className="skyblue"
            >
              [file extension]
            </span>
             = file extension type (ex. .html, .css, .txt)
          </li>
        </ul>,
      ],
      "className": "key-modal",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <button
            onClick={[Function]}
          >
            x
          </button>,
          "className": "button-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "x",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "x",
          "type": "button",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Key:",
          "className": "modal-title",
        },
        "ref": null,
        "rendered": "Key:",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <li>
              <span
                className="skyblue"
              >
                [file]
              </span>
               = file name
            </li>,
            <li>
              <span
                className="skyblue"
              >
                [directory]
              </span>
               = directory name
            </li>,
            <li>
              <span
                className="skyblue"
              >
                [file extension]
              </span>
               = file extension type (ex. .html, .css, .txt)
            </li>,
          ],
          "className": "modal-list",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="skyblue"
                >
                  [file]
                </span>,
                " = file name",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "[file]",
                  "className": "skyblue",
                },
                "ref": null,
                "rendered": "[file]",
                "type": "span",
              },
              " = file name",
            ],
            "type": "li",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="skyblue"
                >
                  [directory]
                </span>,
                " = directory name",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "[directory]",
                  "className": "skyblue",
                },
                "ref": null,
                "rendered": "[directory]",
                "type": "span",
              },
              " = directory name",
            ],
            "type": "li",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="skyblue"
                >
                  [file extension]
                </span>,
                " = file extension type (ex. .html, .css, .txt)",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "[file extension]",
                  "className": "skyblue",
                },
                "ref": null,
                "rendered": "[file extension]",
                "type": "span",
              },
              " = file extension type (ex. .html, .css, .txt)",
            ],
            "type": "li",
          },
        ],
        "type": "ul",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="button-container"
          >
            <button
              onClick={[Function]}
            >
              x
            </button>
          </div>,
          <h2
            className="modal-title"
          >
            Key:
          </h2>,
          <ul
            className="modal-list"
          >
            <li>
              <span
                className="skyblue"
              >
                [file]
              </span>
               = file name
            </li>
            <li>
              <span
                className="skyblue"
              >
                [directory]
              </span>
               = directory name
            </li>
            <li>
              <span
                className="skyblue"
              >
                [file extension]
              </span>
               = file extension type (ex. .html, .css, .txt)
            </li>
          </ul>,
        ],
        "className": "key-modal",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <button
              onClick={[Function]}
            >
              x
            </button>,
            "className": "button-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "x",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "x",
            "type": "button",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Key:",
            "className": "modal-title",
          },
          "ref": null,
          "rendered": "Key:",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <li>
                <span
                  className="skyblue"
                >
                  [file]
                </span>
                 = file name
              </li>,
              <li>
                <span
                  className="skyblue"
                >
                  [directory]
                </span>
                 = directory name
              </li>,
              <li>
                <span
                  className="skyblue"
                >
                  [file extension]
                </span>
                 = file extension type (ex. .html, .css, .txt)
              </li>,
            ],
            "className": "modal-list",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="skyblue"
                  >
                    [file]
                  </span>,
                  " = file name",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "[file]",
                    "className": "skyblue",
                  },
                  "ref": null,
                  "rendered": "[file]",
                  "type": "span",
                },
                " = file name",
              ],
              "type": "li",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="skyblue"
                  >
                    [directory]
                  </span>,
                  " = directory name",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "[directory]",
                    "className": "skyblue",
                  },
                  "ref": null,
                  "rendered": "[directory]",
                  "type": "span",
                },
                " = directory name",
              ],
              "type": "li",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="skyblue"
                  >
                    [file extension]
                  </span>,
                  " = file extension type (ex. .html, .css, .txt)",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "[file extension]",
                    "className": "skyblue",
                  },
                  "ref": null,
                  "rendered": "[file extension]",
                  "type": "span",
                },
                " = file extension type (ex. .html, .css, .txt)",
              ],
              "type": "li",
            },
          ],
          "type": "ul",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
