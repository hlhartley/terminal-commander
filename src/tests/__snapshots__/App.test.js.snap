// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App should match the snapshot with all data passed in correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    0={
      Object {
        "command": "reset",
        "description": "Reset terminal screen",
        "id": 1,
      }
    }
    1={
      Object {
        "command": "clear",
        "description": "Clear screen",
        "id": 2,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <GameContainer
          score={0}
        />,
        <div
          className="buttons-container"
        >
          <button
            className="reset-button"
            onClick={[Function]}
          >
            RESET GAME
          </button>
          <button
            className="keys-button"
            onClick={[Function]}
          >
            KEY
          </button>
          <button
            className="allcommands-button"
            onClick={[Function]}
          >
            ALL COMMANDS
          </button>
        </div>,
        <TerminalCard
          score={0}
          terminalCommands={Array []}
          updateScore={[Function]}
        />,
        undefined,
      ],
      "className": "app-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "clickReset": undefined,
          "score": 0,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="reset-button"
              onClick={[Function]}
            >
              RESET GAME
            </button>,
            <button
              className="keys-button"
              onClick={[Function]}
            >
              KEY
            </button>,
            <button
              className="allcommands-button"
              onClick={[Function]}
            >
              ALL COMMANDS
            </button>,
          ],
          "className": "buttons-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "RESET GAME",
              "className": "reset-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "RESET GAME",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "KEY",
              "className": "keys-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "KEY",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "ALL COMMANDS",
              "className": "allcommands-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "ALL COMMANDS",
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "score": 0,
          "terminalCommands": Array [],
          "updateScore": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <GameContainer
            score={0}
          />,
          <div
            className="buttons-container"
          >
            <button
              className="reset-button"
              onClick={[Function]}
            >
              RESET GAME
            </button>
            <button
              className="keys-button"
              onClick={[Function]}
            >
              KEY
            </button>
            <button
              className="allcommands-button"
              onClick={[Function]}
            >
              ALL COMMANDS
            </button>
          </div>,
          <TerminalCard
            score={0}
            terminalCommands={Array []}
            updateScore={[Function]}
          />,
          undefined,
        ],
        "className": "app-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "clickReset": undefined,
            "score": 0,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="reset-button"
                onClick={[Function]}
              >
                RESET GAME
              </button>,
              <button
                className="keys-button"
                onClick={[Function]}
              >
                KEY
              </button>,
              <button
                className="allcommands-button"
                onClick={[Function]}
              >
                ALL COMMANDS
              </button>,
            ],
            "className": "buttons-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "RESET GAME",
                "className": "reset-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "RESET GAME",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "KEY",
                "className": "keys-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "KEY",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "ALL COMMANDS",
                "className": "allcommands-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "ALL COMMANDS",
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "score": 0,
            "terminalCommands": Array [],
            "updateScore": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
